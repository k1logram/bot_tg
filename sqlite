
async def db_start():
    global db, cur

    db = sq.connect('order.db')
    cur = db.cursor()
#                                                                –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –¥–µ—Ä–µ–≤–Ω—è     –∫–æ–ª –≤–æ       –∞–¥—Ä–µ—Å         –∏–º—è          –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã  end - False(–æ–∂–∏–¥–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∏) True(—É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞)
    db.execute("CREATE TABLE IF NOT EXISTS orders(user_id TEXT, product TEXT, village TEXT, volume TEXT, address TEXT, name TEXT, contact TEXT, payment_method TEXT, end TEXT)")
    db.commit()

async def create_order(state, user_id):
    async with state.proxy() as data:
        cur.execute("INSERT INTO orders VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)", tuple(data.values()))
        db.commit()

async def check_open(message, state):
    async with state.proxy() as data:
        for ret in cur.execute(f"SELECT * FROM application WHERE village = '{message.text}'").fetchall():
            await bot.send_message(chat_id=message.from_user.id,
                                text=f'–í –¥–µ—Ä–µ–≤–Ω–µ {message.text} –¥–æ –¥–æ—Å—Ç–∞–≤–∫–∏ –ø–æ –∑–∞—è–≤–∫–µ –æ—Å—Ç–∞–ª–æ—Å—å - <em>{int(ret[3]) - int(ret[2])}</em>\n–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–µ—à–∫–∞—Öüî¢.',
                                reply_markup=kb_cancel(),
                                   parse_mode='HTML')

async def enter_order(message, state):
    async with state.proxy() as data:
        for ret in cur.execute(f"SELECT expected FROM application WHERE village = '{data['village']}'").fetchall():
            res = int(ret[0]) + int(data['volume'])
            cur.execute(f"UPDATE application SET expected = {res} WHERE village = '{data['village']}'")
            db.commit()

async def view_last_order():

    for ret in cur.execute("SELECT max(rowid) FROM orders"):
        res = ret[0]
        for i in cur.execute(f"SELECT * FROM orders WHERE rowid = '{res}'").fetchall():

            await bot.send_message(chat_id=admin,
                                   text=f'–ü–æ—è–≤–∏–ª–∞—Å—å –Ω–æ–≤–∞—è –∑–∞—è–≤–∫–∞\n<b>{i[5]}</b> –∏–∑ –¥–µ—Ä–µ–≤–Ω–∏ <b>{i[2]}</b> –∑–∞–∫–∞–∑–∞–ª <b>{i[3]} {i[1]}</b>\n–ê–¥—Ä–µ—Å <b>{i[4]}</b>\n–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ <b>{i[6]}</b>\n–û–ø–ª–∞—Ç–∞ - <b>{i[7]}</b>',
                                   parse_mode='HTML')

async def completion_create_order(message, state):
    await create_order(state, message.from_user.id)
    await enter_order(message, state)
    await view_last_order()
    await message.answer('–¢–≤–æ–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ!',
                         reply_markup=main_kb())

async def check_await_order():
    count = 0
    while True:
        for i in cur.execute(f"SELECT user_id, product, volume FROM orders WHERE payment_method = 'await'").fetchall():
            if i:
                for product_name in catalog.product_list:
                    if i[1] in product_name['name']:
                        PRICE = int(product_name['price']) * int(i[2])
                        await bot.send_message(chat_id=admin,
                                               text=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {i[0]} —Å—É–º–º–∞ {PRICE}')
                        count += 1
        if count != 0:
            await bot.send_message(chat_id=admin,
                                   text='–û—Ç–ø—Ä–∞–≤—å ID –∫–ª–∏–µ–Ω—Ç–∞ –æ—Ç –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–∏—à–ª–∞ –æ–ø–ª–∞—Ç–∞.')
        if count == 0:
            await bot.send_message(chat_id=admin,
                             text=f'–û–∂–∏–¥–∞—é—â–∏—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–æ–∫ –Ω–µ—Ç.')
        break


async def accept_order_sql(user_id):
    cur.execute(f"UPDATE orders SET payment_method = '–ö–∞—Ä—Ç–æ–π' WHERE user_id = '{user_id}' and end = 'False'")
    db.commit()
    await bot.send_message(chat_id=int(user_id),
                           text='–¢–≤–æ–π –∑–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω‚úÖ!')

async def view_all_open_orders():
    village = []
    for v in cur.execute(f"SELECT village FROM orders WHERE end = 'False' and payment_method != 'await'").fetchall():
        village.append(v[0])
    for v in set(village):
        await bot.send_message(chat_id=admin,
                         text=f'<b>–ó–∞—è–≤–∫–∏ –≤ {v}</b> üèô.',
                               parse_mode='HTML')
        for i in cur.execute(f"SELECT product, volume FROM orders WHERE village = '{v}' AND payment_method != 'await' AND end = 'False'").fetchall():
            await bot.send_message(chat_id=admin,
                             text=f'{i[0]} {i[1]}')


async def view_orders_in_village(village):
    count = 0
    while True:
        for i in cur.execute(f"SELECT product, volume, address, name, contact, payment_method, rowid FROM orders WHERE village = '{village}' AND payment_method != 'await' AND end = 'False'").fetchall():
            await bot.send_message(chat_id=admin,
                             text=f'{i[6]}\n{i[3]} –ø–æ –∞–¥—Ä–µ—Å—Å—É {i[2]} –∑–∞–∫–∞–∑–∞–ª {i[0]} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {i[1]} —à—Ç. –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ - {i[4]} –º–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã {i[5]}')
            count += 1
        if count != 0:
            await bot.send_message(chat_id=admin,
                                   text='–£–∫–∞–∂–∏ –Ω–æ–º–µ—Ä –∑–∞—è–≤–∫–∏ –∫–æ—Ç–æ—Ä—É—é —Ç—ã –∑–∞–∫—Ä—ã–ª')
        if count == 0:
            await bot.send_message(chat_id=admin,
                             text=f'–ê–∫–≤—Ç–∏–≤–Ω—ã—Ö –∑–∞—è–≤–æ–∫ –≤ {village} –Ω–µ—Ç.')
        break




async def closure_order(id):
    cur.execute(f"UPDATE orders SET end = 'True' WHERE rowid = {id}")
    db.commit()




async def back_counter():
    cur.execute(f"UPDATE application SET expected = '0'")
    db.commit()
