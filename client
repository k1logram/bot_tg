class FSMClient(StatesGroup):
    product = State()
    village = State()
    volume = State()
    address = State()
    name = State()
    contact = State()
    pick_payment_method = State()

HELP_TEXT = '''
<b>Start</b> - <em>–Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞</em>.
<b>–û–ø–ª–∞—Ç–∞</b> - <em>—É–∑–Ω–∞—Ç—å —Å–ø–æ—Å–æ–±—ã –æ–ø–ª–∞—Ç—ã</em>.
<b>–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</b> - <em>–æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–∞</em>.
'''




@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):
    await message.answer('<b>–ü—Ä–∏–≤–µ—Ç</b> üëã!\n\n–¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å –¥—Ä–æ–±–ª—ë–Ω–∫—É –∏–ª–∏ –∑–µ—Ä–Ω–æ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –≤ —Å–≤–æ—é –¥–µ—Ä–µ–≤–Ω—é –∏–∑ –ö–ª—é—á–∏-–ë—É–ª–∞–∫–∞ üöö. \n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ <em>–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑</em>.',
                         reply_markup=client_kb.main_kb(),
                         parse_mode='HTML')

@dp.message_handler(Text(equals='–û–ø–ª–∞—Ç–∞'))
async def cmd_description(message: types.Message):
    await message.answer('–ó–∞–∫–∞–∑ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø—Ä—è–º–æ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞—Ä—Ç–æ–π <b>–°–±–µ—Ä–±–∞–Ω–∫</b>üí≥.\n–õ–∏–±–æ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ <b>–Ω–∞–ª–∏—á–Ω—ã–º–∏</b>üíµ.',
                         parse_mode='HTML')

@dp.message_handler(Text(equals='–ü–æ–º–æ—â—å'))
async def cmd_description(message: types.Message):
    await message.answer(text=HELP_TEXT,
                         parse_mode='HTML')

@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∞'), state='*')
async def cmd_cancel(message: types.Message, state: FSMContext):
    await message.answer('<b>–°–±—Ä–æ—Å–∏–ª –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞</b> ‚ùå.',
                         parse_mode='HTML',
                         reply_markup=client_kb.main_kb())
    await state.finish()

@dp.message_handler(Text(equals='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), state='*')
async def cmd_view_product(message: types.Message):
    await message.answer('–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Äüì¶.\n–î—Ä–æ–±–ª—ë–Ω–∫–∞ - 550‚ÇΩ –∑–∞ –º–µ—à–æ–∫\n–ó–µ—Ä–Ω–æ - 600‚ÇΩ –∑–∞ –º–µ—à–æ–∫',
                         parse_mode='HTML',
                         reply_markup=client_kb.kb_view_product())
    await FSMClient.product.set()


@dp.message_handler(state=FSMClient.product)
async def cmd_load_product(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['user_id'] = message.from_user.id
        data['product'] = message.text
    await FSMClient.next()
    await message.answer(f'–•–æ—Ä–æ—à–æ, —Ç—ã –≤—ã–±—Ä–∞–ª - {message.text}. –¢–µ–ø–µ—Ä—å —Å–∫–∞–∂–∏ —Å–≤–æ—é –¥–µ—Ä–µ–≤–Ω—éüèô.',
                        reply_markup=client_kb.kb_pick_village())      # <---------- –í—ã–±–æ—Ä –¥–µ—Ä–µ–≤–Ω–∏

@dp.message_handler(lambda message: '–î—Ä—É–≥–∞—è' in message.text, state=FSMClient.village)
async def cmd_load_input_village(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ –µ—ë...')

# –º–µ—Å–∞–¥–∂ —Ö–µ–Ω–¥–ª–µ—Ä –±–µ—Ä–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–µ—Ä–µ–≤–Ω–∏ –∏ —É–∑–Ω–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–µ –∫–æ–ª–≤–æ
@dp.message_handler(state=FSMClient.village)
async def cmd_load_village(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['village'] = message.text
    if message.text == '–ö–∞–ª—Ç—É–∫':
        await sqlite.check_open(message, state)
    else:
        await message.answer(f'–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤ –º–µ—à–∫–∞—Öüî¢.',
                             parse_mode='HTML')
    await FSMClient.next()

@dp.message_handler(state=FSMClient.volume)
async def cmd_load_volume(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['volume'] = message.text
    await FSMClient.next()
    await message.answer('–í–≤–µ–¥–∏ —Å–≤–æ–π –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏‚úâÔ∏è.')

@dp.message_handler(state=FSMClient.address)
async def cmd_load_address(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['address'] = message.text
    await FSMClient.next()
    await message.answer('–ù–∞–ø–∏—à–∏ —Å–≤–æ—ë –∏–º—è.')

@dp.message_handler(state=FSMClient.name)
async def cmd_load_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text
    await FSMClient.next()
    await message.answer('–°—É–ø–µ—Ä!\n–û—Å—Ç–∞–ª–æ—Å—å –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏üìû.')

@dp.message_handler(state=FSMClient.contact)
async def cmd_load_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.text
    await message.answer('–í—ã–±–µ—Ä–∏ –∫–∞–∫ —É–¥–æ–±–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—åüí∞.',
                         reply_markup=client_kb.kb_pick_payment_method())
    await FSMClient.next()

@dp.message_handler(lambda message: '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' in message.text, state=FSMClient.pick_payment_method)
async def cmd_pick_payment_method(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_method'] = message.text
        data['end'] = 'False'
    await completion_create_order(message, state)
    await state.finish()

@dp.message_handler(lambda message: '–°–µ–π—á–∞—Å –ø–æ –∫–∞—Ä—Ç–µ —Å–±–µ—Ä–±–∞–Ω–∫' in message.text, state=FSMClient.pick_payment_method)
async def cmd_payment_sberbank(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['payment_method'] = 'await'
        data['end'] = 'False'
        for product_name in catalog.product_list:
            if data['product'] in product_name['name']:
                PRICE = int(product_name['price']) * int(data['volume'])
                await message.answer(f'–î–ª—è –æ–ø–ª–∞—Ç—ã –∑–∞–∫–∞–∑–∞ –ø–µ—Ä–µ–≤–µ–¥–∏ —Å—É–º–º—É {PRICE} ‚ÇΩ –Ω–∞ –±–∞–Ω–∫–æ–≤—Å–∫—É—é –∫–∞—Ä—Ç—É —Å–±–µ—Ä–±–∞–Ω–∫ –Ω–æ–º–µ—Ä ....\n–ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø—Ä–æ–π–¥—ë—Ç –æ–ø–ª–∞—Ç–∞ —Ç—ã –ø–æ–ª—É—á–∏—à—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞',
                                     reply_markup=client_kb.main_kb()) #    <---  –ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã
    await sqlite.create_order(state, message.from_user.id)
    await sqlite.view_last_order()

@dp.message_handler(content_types=ContentType.SUCCESSFUL_PAYMENT, state=FSMClient.pick_payment_method)
async def successful_payment(message: types.Message, state: FSMContext):
    await sqlite.create_order(state, message.from_user.id)
    await sqlite.enter_order(message, state)
    await sqlite.view_last_order()
    await state.finish()



def register_client_handler(dp: Dispatcher):
    dp.register_message_handler(cmd_start, commands='start', state=None)
    dp.register_message_handler(cmd_description, Text(equals='–û–ø–ª–∞—Ç–∞'), state=None)
    dp.register_message_handler(cmd_cancel, Text(equals='–û—Ç–º–µ–Ω–∞', ignore_case=True), state='*')
    dp.register_message_handler(cmd_view_product, Text(equals='–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑'), state=None)
    dp.register_message_handler(cmd_load_product, state=FSMClient.product)
    dp.register_message_handler(cmd_load_input_village, lambda message: '–î—Ä—É–≥–∞—è' in message.text, state=FSMClient.village)
    dp.register_message_handler(cmd_load_village, state=FSMClient.village)
    dp.register_message_handler(cmd_load_volume, state=FSMClient.volume)
    dp.register_message_handler(cmd_load_address, state=FSMClient.address)
    dp.register_message_handler(cmd_load_name, state=FSMClient.name)
    dp.register_message_handler(cmd_load_contact, state=FSMClient.contact)
    dp.register_message_handler(cmd_pick_payment_method, lambda message: '–ü—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏' in message.text, state=FSMClient.pick_payment_method)
    dp.register_message_handler(cmd_payment_sberbank, lambda message: '–°–µ–π—á–∞—Å –ø–æ –∫–∞—Ä—Ç–µ —Å–±–µ—Ä–±–∞–Ω–∫' in message.text, state=FSMClient.pick_payment_method)
    dp.register_message_handler(successful_payment, content_types=ContentType.SUCCESSFUL_PAYMENT, state=FSMClient.pick_payment_method)
